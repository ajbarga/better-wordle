name: Build Site to Deploy
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Build
    if: ${{ contains(github.event.head_commit.message, '#D') }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO: ajbarga/word-game
      BASE: gh-pages
      BRANCH: deploy/${{ github.run_id }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
          
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Configure Git
        run: |
          git config --global user.email actions@no-reply.github.com
          git config --global user.name github-actions

      - name: Build Site
        run: |
          npm i
          npm run build

      - name: Create and Push Build to Branch
        run: |
          mkdir deploy
          cd deploy
          git clone https://${{ secrets.MY_PAT }}@github.com/${{ env.REPO }}.git
          cd word-game
          git checkout --force ${{ env.BASE }}
          git checkout -b ${{ env.BRANCH }}
          rm -rf ./assets
          rm -rf index.html
          mv -f ../../dist/* .
          git add -f .
          git commit -m "Deploy Build to GH Pages"
          git push -f -u origin ${{ env.BRANCH }}
          

      - name: Create PR for Build
        run: |
          gh pr create \
            --repo ${{ env.REPO }} \
            --reviewer ajbarga \
            --base ${{ env.BASE }} \
            --head ${{ env.BRANCH }} \
            --title "${{ github.event.head_commit.message }}" \
            --body "Created automatically by merge to main for ${{ github.actor }}."

  merge:
    needs: deploy
    if: ${{ contains(github.event.head_commit.message, '#M') }}
    runs-on: ubuntu-latest
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygithub

    - name: Check and Merge PR
      run: |
        from github import Github

        g = Github('${{ secrets.MY_PAT }}')
        r = g.get_repo('ajbarga/word-game')
        pr_list = [p for p in r.get_pulls(state='open')] + [p for p in r.get_pulls(state='closed') if p.merged == True]
        pr_list.sort(key=lambda p: p.number, reverse=True)

        pr = pr_list[0]
        merged_pr = [p for p in pr_list if p.state == 'closed'][0]
        dt = [c for c in r.get_commits(since=r.get_commit(merged_pr.merge_commit_sha).commit.author.date)]
        dt.sort(key=lambda c: c.commit.author.date)

        commits = r.compare(base=dt[0].sha, head=dt[-1].sha).commits
        commit_list = []
        count = 0
        newline = '\n\n'
        for c in commits:
            message = '\n - '.join([f'{file.filename}: + {file.additions}, - {file.deletions}' for file in c.files])
            commit_list.append(f'{count}: {c.commit.message} by {c.commit.author.name} @ {c.html_url}\n - {message}')
            count += 1

        pr.edit(body=f"{pr.body}\n\n{newline.join(commit_list)}")
        pr.create_review(event="APPROVE")
      shell: python
      # r.merge(base=pr.base.ref, head=pr.head.ref, commit_message=f"Merge branch {pr.head.ref} into {pr.base.ref}")
